jenkins:
  systemMessage: "Jenkins configured as code for Weather Report Project!"
  numExecutors: 2


  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  nodes:
    - permanent:
        name: "{{ project_name }}-agent"
        remoteFS: "/opt/jenkins"
        labelString: "app-vm"
        launcher:
          jnlp: {}
        numExecutors: 1
        mode: "NORMAL"
        retentionStrategy:
          always: {}

unclassified:
  location:
    url: "http://{{ project.private_ip }}:8080/"
  ansiColorMapName: "xterm"

jobs:
  - script: |
      pipelineJob('deploy_pipeline') {
        definition {
          cps {
            script("""
              pipeline{
                  agent any
                  options {
                      ansiColor('xterm')
                  }
                  stages {
                      stage('Install 3rd party components'){
                        steps{
                          sh 'ansible-playbook app_execute.yml -t install_components -i {{ playbook_dir }}/workspace/inventory.yml --vault-password-file vault_pass.txt'
                        }
                      }
                      stage('Add files to {{ project.name}}-agent vm'){
                        steps{
                          sh 'ansible-playbook app_execute.yml -t add_files -i {{ playbook_dir }}/workspace/inventory.yml --vault-password-file vault_pass.txt'
                        }
                      }
                      stage('Deploy docker containers'){
                        steps{
                          sh 'ansible-playbook app_execute.yml -t deploy_docker -i {{ playbook_dir }}/workspace/inventory.yml --vault-password-file vault_pass.txt'
                        }
                      }
                      stage('Run Docker containers') {
                          steps {
                              sh 'docker-compose up -d'
                          }
                      }
                  }
              }
            """)
            sandbox(true)
          }
        }
      }
  - script: |
      pipelineJob('run_fetcher') {
        definition {
          cps {
            script("""
              pipeline{
                  agent any
                  options {
                      ansiColor('xterm')
                  }
                  stages {
                      stage('Fetch the data') {
                          steps {
                              sh 'docker-compose run --rm fetch_app'
                          }
                      }
                      stage('Create report') {
                          steps {
                              sh 'docker-compose run --rm report_app'
                          }
                      }
                      stage('Send report to S3') {
                          steps {
                              sh 'docker-compose run --rm send_report'
                          }
                      }
                  }
                  triggers {
                      cron('H * * * *')
                  }
              }
            """)
            sandbox(true)
          }
        }
      }
